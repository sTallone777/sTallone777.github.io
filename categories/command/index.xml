<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Command on Ranbo&#39;s Blog</title>
    <link>http://example.org/categories/command/</link>
    <description>Recent content in Command on Ranbo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Dec 2020 21:56:58 +0900</lastBuildDate><atom:link href="http://example.org/categories/command/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Use EF In DotNet Core</title>
      <link>http://example.org/post/csharp/mvc-ef/</link>
      <pubDate>Tue, 22 Dec 2020 21:56:58 +0900</pubDate>
      
      <guid>http://example.org/post/csharp/mvc-ef/</guid>
      <description>How to create entity in dotnet core Install Packages First of all, you need install the packages that needed to create the entitys through the nuget package manager.
 Microsoft.EntityFrameworkCore Microsoft.EntityFrameworkCore.Tools Microsoft.EntityFrameworkCore.Design Microsoft.EntityFrameworkCore.Relational Pomelo.EntityFrameworkCore.MySql  Create Entity Then you can create entitys with the following command at the console.
For Mysql:
Scaffold-DbContext -Provider Pomelo.EntityFrameworkCore.MySql -Context DBContext -Project Common -Connection &amp;#34;Server=192.168.10.100;User Id=ranbo;Password=ranBo000;Database=FILECTLSYS&amp;#34; -outputdir DBModel For Sql:
Scaffold-DbContext -Force “Server=192.168.10.100;Database=FILECTLSYS;User ID=ranbo;Password=ranBo000;” Microsoft.EntityFrameworkCore.SqlServer -OutputDir DBModel </description>
    </item>
    
    <item>
      <title>SSL Command</title>
      <link>http://example.org/post/ssl/ssl-command/</link>
      <pubDate>Mon, 07 Dec 2020 15:23:53 +0900</pubDate>
      
      <guid>http://example.org/post/ssl/ssl-command/</guid>
      <description>Certificate&amp;rsquo;s generation and publisher RootCA作成(keytool)： keytool -genkeypair -alias {rootca_name} -keyalg RSA -keysize 2048 -validity 7300 -keystore ca.jks RootCAで二級CA作成に関するコマンド(keytool)： #独自証明書作成： keytool -genkeypair -alias {subca_name} -keyalg RSA -keysize 2048 -validity 7300 -keystore ca.jks #独自証明書の請求書を作成： keytool -certreq -alias {subca_name} -file {subca_name}.csr -keystore ca.jks #RootCAで独自証明書をサイン： keytool -gencert -alias {rootca_name} -keystore ca.jks -infile {subca_name}.csr -outfile {subca_name}.cer　-validity 7300 #証明書の証明書チェーンをキーストアに入れる： keytool -importcert -alias {subca_name} -file {subca_name}.cer -keystore ca.jks #p12形式のモニタサーバ証明書をエクスポート： keytool -importkeystore -srckeystore ca.jks -destkeystore jp.cps-iot.{your_filename}.P12 -srcalias {subca_name} -destalias pvk -srcstoretype JKS -deststoretype PKCS12 -noprompt #p12からclient証明書を取り出す： openssl pkcs12 -in .</description>
    </item>
    
    <item>
      <title>Flutter Command</title>
      <link>http://example.org/post/flutter/flutter-command/</link>
      <pubDate>Mon, 07 Dec 2020 12:00:41 +0900</pubDate>
      
      <guid>http://example.org/post/flutter/flutter-command/</guid>
      <description>Config Flutter Environment Installation Guide
Convert FlutterApp to FlutterWeb #download web sdk flutter channel beta flutter upgrade flutter config --enable-web flutter devices #then type in following words on project terminal #and the web contents will be builded on build/web/ flutter build web Cretae flutter project by commands flutter create --no-overwrite $PROJECT cd $PROJECT flutter analyze flutter test flutter run </description>
    </item>
    
    <item>
      <title>Docker Command</title>
      <link>http://example.org/post/docker/docker-command/</link>
      <pubDate>Sat, 05 Dec 2020 22:02:10 +0900</pubDate>
      
      <guid>http://example.org/post/docker/docker-command/</guid>
      <description>Docker Command #Start/Stop Container docker start/stop [containerID] #Running container status docker ps #Enter the container docker attach [containerID] #Create a container and run it docker run -it ubuntu:14.04 /bin/bash #Slove the problem than process 1 is not &amp;#34;init&amp;#34; docker run -tid --name centos8 --privileged=true -p 3306:3306centos:latest /sbin/init docker exec -it test /bin/bash #Create a container with mysql5.7 image docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 sudo docker exec -it mysql bash mysql -uroot -p123456 #Delete image docker rmi [image] #Run a container with port mapping docker run -it -d -p 8083:80 centos:latest /bin/bash #Check the port config docker port [containerID] </description>
    </item>
    
    <item>
      <title>Git Command</title>
      <link>http://example.org/post/git/git-command/</link>
      <pubDate>Sat, 05 Dec 2020 11:53:10 +0900</pubDate>
      
      <guid>http://example.org/post/git/git-command/</guid>
      <description>Git Command git init # remote(ssh)  git remote add origin git@github.com:{github_name}/{repo_name}.git git status git add . git commit -m &amp;#34;{comment}&amp;#34; # make ssl key # this command will create a public key and primary key at ~/.ssh/ folder # open ~/.ssh/id_rsa.pub adn copy the content to your  # github account settings -&amp;gt; SSH and GPG keys ssh-keygen -t rsa -C &amp;#34;{github_account_email}&amp;#34; # confirm connect ssh -T git@github.com # push to your repositry git push -u origin master Other Command # delete folder git rm {folder_name} -r -f # delete file git rm {file_name} </description>
    </item>
    
  </channel>
</rss>
